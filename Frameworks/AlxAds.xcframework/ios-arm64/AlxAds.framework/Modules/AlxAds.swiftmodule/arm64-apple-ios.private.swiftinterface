// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AlxAds
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVFoundation
import AdSupport
@_exported import AlxAds
import CommonCrypto
import CoreLocation
import CoreTelephony
import DeveloperToolsSupport
import Foundation
import Network
import StoreKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class AlxBaseAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didAddSubview(_ subview: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willRemoveSubview(_ subview: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToSuperview()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToWindow()
  @objc deinit
}
@objc public protocol AlxRewardVideoAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc func rewardVideoAdLoad(_ ad: AlxAds.AlxRewardVideoAd)
  @objc func rewardVideoAdFailToLoad(_ ad: AlxAds.AlxRewardVideoAd, didFailWithError error: any Swift.Error)
  @objc optional func rewardVideoAdImpression(_ ad: AlxAds.AlxRewardVideoAd)
  @objc optional func rewardVideoAdClick(_ ad: AlxAds.AlxRewardVideoAd)
  @objc optional func rewardVideoAdClose(_ ad: AlxAds.AlxRewardVideoAd)
  @objc optional func rewardVideoAdPlayStart(_ ad: AlxAds.AlxRewardVideoAd)
  @objc optional func rewardVideoAdPlayEnd(_ ad: AlxAds.AlxRewardVideoAd)
  @objc optional func rewardVideoAdReward(_ ad: AlxAds.AlxRewardVideoAd)
  @objc optional func rewardVideoAdPlayFail(_ ad: AlxAds.AlxRewardVideoAd, didFailWithError error: any Swift.Error)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class AlxBaseNativeAdView : AlxAds.AlxBaseAdView {
  @_Concurrency.MainActor @preconcurrency public var mViews: [Swift.String : UIKit.UIView]
  @_Concurrency.MainActor @preconcurrency public var mMediaView: AlxAds.AlxMediaView?
  @_Concurrency.MainActor @preconcurrency public var mCloseView: UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func getNativeAdData() -> AlxAds.AlxNativeAd?
  @_Concurrency.MainActor @preconcurrency public func setNativeAdData(_ nativeAd: AlxAds.AlxNativeAd?)
  @_Concurrency.MainActor @preconcurrency public func destroy()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class AlxBaseBannerView : AlxAds.AlxBaseAdView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class AlxMediaModelView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func setMediaContent(_ mediaContent: AlxAds.AlxMediaContent?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AlxNativeAd : ObjectiveC.NSObject, AlxAds.AlxAdDelegate {
  @objc public static let Create_Type_Unknown: Swift.Int
  @objc public static let Create_Type_Large_Image: Swift.Int
  @objc public static let Create_Type_Small_Image: Swift.Int
  @objc public static let Create_Type_Group_Image: Swift.Int
  @objc public static let Create_Type_Video: Swift.Int
  @objc override dynamic public init()
  @objc public var createType: Swift.Int {
    get
  }
  @objc public var adSource: Swift.String? {
    get
  }
  @objc public var title: Swift.String? {
    get
  }
  @objc public var desc: Swift.String? {
    get
  }
  @objc public var icon: AlxAds.AlxNativeAdImage? {
    get
  }
  @objc public var images: [AlxAds.AlxNativeAdImage]? {
    get
  }
  @objc public var callToAction: Swift.String? {
    get
  }
  @objc public var mediaContent: AlxAds.AlxMediaContent? {
    get
  }
  @objc weak public var rootViewController: UIKit.UIViewController?
  @objc weak public var delegate: (any AlxAds.AlxNativeAdDelegate)?
  @objc public func registerView(container: UIKit.UIView, clickableViews: [UIKit.UIView]?)
  @objc public func registerView(container: UIKit.UIView, clickableViews: [UIKit.UIView]?, closeView: UIKit.UIView?)
  @objc public func unregisterView()
  @objc public var adLogo: UIKit.UIImage? {
    @objc get
  }
  @objc public func getPrice() -> Swift.Double
  @objc public func reportBiddingUrl()
  @objc public func reportChargingUrl()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class AlxBannerAdView : AlxAds.AlxBaseBannerView, AlxAds.AlxAdDelegate {
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AlxAds.AlxBannerViewAdDelegate)?
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var rootViewController: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var refreshInterval: Swift.Int {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var isHideClose: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func loadAd(adUnitId: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func loadAd(adUnitId: Swift.String, request: AlxAds.AlxAdRequest? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public func isReady() -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public func destroy()
  @_Concurrency.MainActor @preconcurrency @objc public func getPrice() -> Swift.Double
  @_Concurrency.MainActor @preconcurrency @objc public func reportBiddingUrl()
  @_Concurrency.MainActor @preconcurrency @objc public func reportChargingUrl()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AlxNativeAdImage : ObjectiveC.NSObject {
  @objc public var url: Swift.String? {
    get
  }
  @objc public var width: Swift.Int {
    get
  }
  @objc public var height: Swift.Int {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AlxMediaContent : ObjectiveC.NSObject {
  @objc public var image: UIKit.UIImage?
  @objc public var hasVideo: Swift.Bool {
    get
  }
  @objc public var aspectRatio: CoreFoundation.CGFloat {
    get
  }
  @objc public var videoDelegate: (any AlxAds.AlxMediaVideoDelegate)?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AlxInterstitialAd : ObjectiveC.NSObject, AlxAds.AlxAdDelegate {
  @objc weak public var delegate: (any AlxAds.AlxInterstitialAdDelegate)? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public func loadAd(adUnitId: Swift.String)
  @objc public func showAd(present: UIKit.UIViewController)
  @objc public func isReady() -> Swift.Bool
  @objc public func destroy()
  @objc public func getPrice() -> Swift.Double
  @objc public func reportBiddingUrl()
  @objc public func reportChargingUrl()
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @objc @_Concurrency.MainActor @preconcurrency public class AlxMediaView : AlxAds.AlxMediaModelView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency override public func setMediaContent(_ mediaContent: AlxAds.AlxMediaContent?)
  @objc @_Concurrency.MainActor @preconcurrency public func getAdMediaView() -> UIKit.UIView?
  @objc deinit
}
@objc public protocol AlxNativeAdLoaderDelegate : ObjectiveC.NSObjectProtocol {
  @objc func nativeAdLoaded(didReceive ads: [AlxAds.AlxNativeAd])
  @objc func nativeAdFailToLoad(didFailWithError error: any Swift.Error)
}
@objc public protocol AlxAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc func getPrice() -> Swift.Double
  @objc func reportBiddingUrl()
  @objc func reportChargingUrl()
}
@objc public protocol AlxBannerViewAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc func bannerViewAdLoad(_ bannerView: AlxAds.AlxBannerAdView)
  @objc func bannerViewAdFailToLoad(_ bannerView: AlxAds.AlxBannerAdView, didFailWithError error: any Swift.Error)
  @objc optional func bannerViewAdImpression(_ bannerView: AlxAds.AlxBannerAdView)
  @objc optional func bannerViewAdClick(_ bannerView: AlxAds.AlxBannerAdView)
  @objc optional func bannerViewAdClose(_ bannerView: AlxAds.AlxBannerAdView)
}
@_inheritsConvenienceInitializers @objc public class AlxRewardVideoAd : ObjectiveC.NSObject, AlxAds.AlxAdDelegate {
  @objc weak public var delegate: (any AlxAds.AlxRewardVideoAdDelegate)? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public func loadAd(adUnitId: Swift.String)
  @objc public func showAd(present: UIKit.UIViewController)
  @objc public func isReady() -> Swift.Bool
  @objc public func destroy()
  @objc public func getPrice() -> Swift.Double
  @objc public func reportBiddingUrl()
  @objc public func reportChargingUrl()
  @objc deinit
}
@objc public protocol AlxInterstitialAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc func interstitialAdLoad(_ ad: AlxAds.AlxInterstitialAd)
  @objc func interstitialAdFailToLoad(_ ad: AlxAds.AlxInterstitialAd, didFailWithError error: any Swift.Error)
  @objc optional func interstitialAdImpression(_ ad: AlxAds.AlxInterstitialAd)
  @objc optional func interstitialAdClick(_ ad: AlxAds.AlxInterstitialAd)
  @objc optional func interstitialAdClose(_ ad: AlxAds.AlxInterstitialAd)
  @objc optional func interstitialAdRenderFail(_ ad: AlxAds.AlxInterstitialAd, didFailWithError error: any Swift.Error)
  @objc optional func interstitialAdVideoStart(_ ad: AlxAds.AlxInterstitialAd)
  @objc optional func interstitialAdVideoEnd(_ ad: AlxAds.AlxInterstitialAd)
}
@_inheritsConvenienceInitializers @objc public class AlxAdRequest : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol AlxMediaVideoDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func videoStart()
  @objc optional func videoEnd()
  @objc optional func videoPlay()
  @objc optional func videoPause()
  @objc optional func videoPlayError(error: any Swift.Error)
  @objc optional func videoMute(isMute: Swift.Bool)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AlxSdk : ObjectiveC.NSObject {
  @objc public static func initializeSDK(token: Swift.String, sid: Swift.String, appId: Swift.String)
  @objc public static func isSDKInit() -> Swift.Bool
  @objc public static func setDebug(_ debug: Swift.Bool)
  @objc public static func getSDKName() -> Swift.String
  @objc public static func getSDKVersion() -> Swift.String
  @objc public static func addExtraParameters(key: Swift.String, value: Any)
  @objc public static func getExtraParameters() -> [Swift.String : Any]
  @objc public static func setSubjectToGDPR(_ value: Swift.Bool)
  @objc public static func setUserConsent(_ value: Swift.String)
  @objc public static func setBelowConsentAge(_ value: Swift.Bool)
  @objc public static func subjectToUSPrivacy(_ value: Swift.String)
  @objc deinit
}
@objc public protocol AlxNativeAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func nativeAdImpression(_ nativeAd: AlxAds.AlxNativeAd)
  @objc optional func nativeAdClick(_ nativeAd: AlxAds.AlxNativeAd)
  @objc optional func nativeAdClose(_ nativeAd: AlxAds.AlxNativeAd)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AlxNativeAdLoader : ObjectiveC.NSObject {
  @objc weak public var delegate: (any AlxAds.AlxNativeAdLoaderDelegate)? {
    @objc get
    @objc set
  }
  @objc public init(adUnitID: Swift.String)
  @objc public func loadAd()
  @objc deinit
}
